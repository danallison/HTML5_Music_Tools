// Generated by CoffeeScript 1.3.3
var Tone, ToneInterface,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Tone = (function() {

  function Tone(frequency, type) {
    var types;
    if (frequency == null) {
      frequency = 440;
    }
    if (type == null) {
      type = "sine";
    }
    types = {
      sine: 0,
      square: 1,
      sawtooth: 2,
      triangle: 3
    };
    this.oscillator = context.createOscillator();
    this.oscillator.frequency.value = frequency;
    this.oscillator.type = type;
    this.oscillator.connect(context.destination);
  }

  Tone.prototype.change_frequency = function(frequency) {
    return this.oscillator.frequency.value = frequency;
  };

  Tone.prototype.start = function() {
    return this.oscillator.start(0);
  };

  Tone.prototype.stop = function() {
    var frequency, type;
    this.oscillator.stop(0);
    frequency = this.oscillator.frequency.value;
    type = this.oscillator.type;
    this.oscillator = context.createOscillator();
    this.oscillator.frequency.value = frequency;
    this.oscillator.type = type;
    return this.oscillator.connect(context.destination);
  };

  Tone.prototype.slide_frequency = function(new_frequency, duration) {
    var frequency, interval, steps, time, _i, _results,
      _this = this;
    if (duration == null) {
      duration = 1000;
    }
    frequency = this.oscillator.frequency.value;
    steps = (function() {
      _results = [];
      for (var _i = frequency; frequency <= new_frequency ? _i <= new_frequency : _i >= new_frequency; frequency <= new_frequency ? _i++ : _i--){ _results.push(_i); }
      return _results;
    }).apply(this);
    time = duration / steps.length;
    return interval = setInterval(function() {
      if (steps.length) {
        return _this.oscillator.frequency.value = steps.shift();
      } else {
        return clearInterval(interval);
      }
    }, time);
  };

  return Tone;

})();

ToneInterface = (function(_super) {

  __extends(ToneInterface, _super);

  function ToneInterface(frequency, type) {
    var height,
      _this = this;
    ToneInterface.__super__.constructor.call(this, frequency, type);
    d3.select("body").append("div").attr("id", "");
    height = window.innerHeight;
    d3.select(window).on("mousemove", function() {
      return _this.change_frequency(height - d3.event.y);
    });
    this.start();
  }

  return ToneInterface;

})(Tone);
