// Generated by CoffeeScript 1.3.3
var Noise, Tone, Wave,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

Wave = (function() {

  function Wave(data, sample_rate) {
    this.wave = new RIFFWAVE();
    this.wave.header.sampleRate = sample_rate;
    this.wave.Make(data);
    this.audio = new Audio(this.wave.dataURI);
  }

  Wave.prototype.play = function() {
    return this.audio.play();
  };

  return Wave;

})();

Tone = (function(_super) {

  __extends(Tone, _super);

  function Tone(bps, milliseconds) {
    var data, denom, i, sample_rate, _i, _ref;
    this.bps = bps != null ? bps : 440;
    if (milliseconds == null) {
      milliseconds = 200;
    }
    sample_rate = 44100;
    denom = sample_rate / this.bps;
    data = [];
    for (i = _i = 0, _ref = Math.floor(sample_rate * milliseconds / 1000); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      data[i] = 128 + Math.round(127 * Math.sin(i / denom));
    }
    Tone.__super__.constructor.call(this, data, sample_rate);
  }

  return Tone;

})(Wave);

Noise = (function(_super) {

  __extends(Noise, _super);

  function Noise(tone, milliseconds) {
    var data, i, sample_rate, _i, _ref;
    if (milliseconds == null) {
      milliseconds = 40;
    }
    sample_rate = 44100;
    data = [];
    for (i = _i = 0, _ref = Math.floor(sample_rate * milliseconds / 1000); 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      data[i] = 128 + Math.round(127 * Math.sin(i / (tone * 50 + tone * 50 * Math.random())));
    }
    Noise.__super__.constructor.call(this, data, sample_rate);
  }

  return Noise;

})(Wave);
