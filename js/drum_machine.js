// Generated by CoffeeScript 1.3.3
var BeatMatrix, DrumMachine, DrumMachineInterface,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

BeatMatrix = (function() {

  function BeatMatrix(channels, beats) {
    var channel, _i, _j, _ref, _ref1;
    this.channels = channels;
    this.beats = beats;
    this.matrix = [];
    for (_i = 0, _ref = this.channels; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--) {
      channel = [];
      for (_j = 0, _ref1 = this.beats; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? _j++ : _j--) {
        channel.push(0);
      }
      this.matrix.push(channel);
    }
  }

  BeatMatrix.prototype.add_hit = function(channel, beat) {
    return this.matrix[channel][beat] = 1;
  };

  BeatMatrix.prototype.remove_hit = function(channel, beat) {
    return this.matrix[channel][beat] = 0;
  };

  BeatMatrix.prototype.add_hits = function(channel, beats) {
    var beat, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = beats.length; _i < _len; _i++) {
      beat = beats[_i];
      _results.push(this.add_hit(channel, beat));
    }
    return _results;
  };

  BeatMatrix.prototype.remove_hits = function(channel, beats) {
    var beat, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = beats.length; _i < _len; _i++) {
      beat = beats[_i];
      _results.push(this.remove_hit(channel, beat));
    }
    return _results;
  };

  BeatMatrix.prototype.add_beats = function(how_many_beats) {};

  BeatMatrix.prototype.add_channels = function(new_sounds) {};

  return BeatMatrix;

})();

DrumMachine = (function(_super) {

  __extends(DrumMachine, _super);

  function DrumMachine(sounds, beats, bpm) {
    this.sounds = sounds != null ? sounds : DrumMachine.default_sounds;
    this.beats = beats != null ? beats : 16;
    this.bpm = bpm != null ? bpm : 260;
    DrumMachine.__super__.constructor.call(this, this.sounds.length, this.beats);
    this.beat_duration = 60000 / this.bpm;
    this.playing = false;
    this.current_beat = 0;
  }

  DrumMachine.prototype.change_tempo = function(new_bpm) {
    this.bpm = new_bpm;
    return this.beat_duration = 60000 / new_bpm;
  };

  DrumMachine.prototype.change_sound = function(index, sound) {
    if (typeof sound === "string") {
      sound = new Sound(sound);
    }
    return this.sounds[index] = sound;
  };

  DrumMachine.prototype.next_beat = function() {
    var channel, difference, next, now, _i, _ref,
      _this = this;
    for (channel = _i = 0, _ref = this.channels; 0 <= _ref ? _i < _ref : _i > _ref; channel = 0 <= _ref ? ++_i : --_i) {
      if (this.matrix[channel][this.current_beat]) {
        this.sounds[channel].play();
      }
    }
    this.current_beat = (this.current_beat + 1) % this.beats;
    if (this.playing) {
      now = new Date().getTime();
      this.expected = this.expected || now;
      difference = now - this.expected;
      this.expected += this.beat_duration;
      next = Math.max(0, this.beat_duration - difference);
      return this.timeout = setTimeout(function() {
        return _this.next_beat();
      }, next);
    } else {
      return this.expected = null;
    }
  };

  DrumMachine.prototype.play = function() {
    this.playing = true;
    return this.next_beat();
  };

  DrumMachine.prototype.stop = function() {
    this.playing = false;
    clearTimeout(this.timeout);
    return this.expected = null;
  };

  return DrumMachine;

})(BeatMatrix);

DrumMachineInterface = (function(_super) {

  __extends(DrumMachineInterface, _super);

  function DrumMachineInterface(sounds, beats, bpm) {
    this.resize = __bind(this.resize, this);

    this.toggle_play = __bind(this.toggle_play, this);

    this.toggle_hit = __bind(this.toggle_hit, this);

    var _this = this;
    DrumMachineInterface.__super__.constructor.call(this, sounds, beats, bpm);
    this.view = d3.select("body").append("div").attr("id", "drum_machine_view");
    d3.select(window).on("keypress", function() {
      if (d3.event.which === 32) {
        return _this.toggle_play();
      }
    }).on("resize", this.resize);
    this.play_button = this.view.append("div").attr("id", "play_button").attr("class", "stopped").style("position", "absolute").style("top", "-25px").style("left", "0px").on("click", this.toggle_play);
    this.resize();
    this.render_matrix_view();
  }

  DrumMachineInterface.prototype.toggle_hit = function(channel_number, beat_number) {
    var matrix_cell, matrix_view_cell;
    matrix_cell = this.matrix[channel_number][beat_number];
    matrix_view_cell = this.matrix_view[channel_number][beat_number];
    if (matrix_cell) {
      this.remove_hit(channel_number, beat_number);
      return matrix_view_cell.attr("class", "matrix_view_cell off");
    } else {
      this.add_hit(channel_number, beat_number);
      return matrix_view_cell.attr("class", "matrix_view_cell on");
    }
  };

  DrumMachineInterface.prototype.toggle_play = function() {
    if (this.playing) {
      this.stop();
      return this.play_button.attr("class", "stopped");
    } else {
      this.play();
      return this.play_button.attr("class", "playing");
    }
  };

  DrumMachineInterface.prototype.change_sound = function(index, url) {
    return DrumMachineInterface.__super__.change_sound.call(this, index, url);
  };

  DrumMachineInterface.prototype.next_beat = function() {
    var channel_view, _i, _len, _ref;
    _ref = this.matrix_view;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      channel_view = _ref[_i];
      channel_view[this.current_beat].style("opacity", "1");
      channel_view[((this.current_beat - 1) + this.beats) % this.beats].style("opacity", "0.5").style("opacity", "0.3");
    }
    return DrumMachineInterface.__super__.next_beat.apply(this, arguments);
  };

  DrumMachineInterface.prototype.render_matrix_view = function(matrix) {
    var beat_number, cell, channel_number, channel_view, click_func, hit, _i, _j, _k, _l, _len, _len1, _ref, _ref1, _ref2, _results,
      _this = this;
    if (matrix) {
      this.matrix = matrix;
    }
    this.channels = this.matrix.length;
    this.beats = this.matrix[0].length;
    if (this.matrix_view) {
      _ref = this.matrix_view;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        channel_view = _ref[_i];
        for (_j = 0, _len1 = channel_view.length; _j < _len1; _j++) {
          cell = channel_view[_j];
          cell.remove();
        }
      }
    }
    this.matrix_view = [];
    _results = [];
    for (channel_number = _k = 0, _ref1 = this.channels; 0 <= _ref1 ? _k < _ref1 : _k > _ref1; channel_number = 0 <= _ref1 ? ++_k : --_k) {
      channel_view = [];
      for (beat_number = _l = 0, _ref2 = this.beats; 0 <= _ref2 ? _l < _ref2 : _l > _ref2; beat_number = 0 <= _ref2 ? ++_l : --_l) {
        click_func = (function(c, b) {
          return function() {
            return _this.toggle_hit(c, b);
          };
        })(channel_number, beat_number);
        hit = this.matrix[channel_number][beat_number];
        channel_view.push(this.view.append("div").attr("class", "matrix_view_cell off").style("left", "" + (beat_number * 45) + "px").style("top", "" + (channel_number * 45) + "px").style("opacity", "0.3").on("click", click_func));
      }
      _results.push(this.matrix_view.push(channel_view));
    }
    return _results;
  };

  DrumMachineInterface.prototype.resize = function() {
    var cell_height, matrix_height, matrix_width, screen_height, screen_width;
    cell_height = 45;
    screen_height = window.innerHeight;
    screen_width = window.innerWidth;
    matrix_height = cell_height * this.channels;
    matrix_width = cell_height * this.beats;
    return this.view.style("top", "" + (screen_height / 2 - matrix_height / 2) + "px").style("left", "" + (screen_width / 2 - matrix_width / 2) + "px");
  };

  DrumMachineInterface.prototype.clear_hits = function() {
    var beat, beat_number, channel, channel_number, _i, _len, _ref, _results;
    _ref = this.matrix;
    _results = [];
    for (channel_number = _i = 0, _len = _ref.length; _i < _len; channel_number = ++_i) {
      channel = _ref[channel_number];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (beat_number = _j = 0, _len1 = channel.length; _j < _len1; beat_number = ++_j) {
          beat = channel[beat_number];
          if (beat) {
            _results1.push(this.toggle_hit(channel_number, beat_number));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  DrumMachineInterface.prototype.save = function() {
    return localStorage["beat" + localStorage.length] = JSON.stringify(this.matrix);
  };

  return DrumMachineInterface;

})(DrumMachine);
